@page "/chats/{userIds}"
@page "/chats"
@implements IDisposable
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@inject NavigationManager  _navigationManager
@inject ApplicationDbContext  _applicationDbContext


<AuthorizeView>
    <Authorized>
        <div class="content px-4">

            @if (chatting)
            {
            <div class="chat_window">
                <div class="top_menu">
                    <div class="buttons">
                        <div class="button close"></div>
                        <div class="button minimize"></div>
                        <div class="button maximize"></div>
                    </div>
                    <div class="title">Chat</div>
                </div>
                <ul class="messages">
                    @foreach (var message in messages)
                    { 
                        <li class="message @(message.IsMine ? "right" : "left")">
                            <div class="avatar"></div>
                            <div class="text_wrapper">
                                <div class="text">@message.Body</div>
                            </div>
                        </li>
                    }
                </ul>
                <div class="bottom_wrapper clearfix">
                    <div class="message_input_wrapper">
                        <input @bind-value="newMessage" class="message_input" placeholder="Type your message here..." />
                    </div>
                    <div class="send_message" @onclick=@Send>
                        <div class="icon"></div>
                        <div class="text">Send</div>
                    </div>
                </div>
            </div>
            }
            else
            {
                <h1>Chat List</h1>
                @if (CurrentJobs != null)
                    foreach (var jobId in CurrentJobs)
                    {
                        var job = _applicationDbContext.Find<Job>(jobId);
                        <NavLink class="nav-link" Match="NavLinkMatch.All" href=@($"/chats/{job.FreelancerId}_{job.ClientId}")>@job.Title</NavLink>
                    }
            }
        </div>
    </Authorized>
</AuthorizeView>


@code {
    bool chatting = false;
    string newMessage = null;
    string userName = null;

    List<Message> messages = new List<Message>();

    [Parameter]
    public string UserIds { get; set; }
    HubConnection connection;
    string userId = null;
    string anotherUserId = null;
    string[] CurrentJobs { get; set; }

    protected async override Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity.Name;
        userId = _userManager.GetUserId(user);
        CurrentJobs = (await _userManager.FindByIdAsync(userId)).CurrentJobs?.Split();
        if (UserIds != null && userId != UserIds.Split('_')[1] && userId != UserIds.Split('_')[1])
            _navigationManager.NavigateTo("/");
        //Initialize SignalR
        connection = new HubConnectionBuilder()
    .WithUrl("https://localhost:44306/chathub")
    .Build();
        connection.On<string, string, string>("NotifyUser", NotifyUser);
        await connection.StartAsync();

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (UserIds != null)
        {
            anotherUserId = UserIds.Split('_')[0];
            if (anotherUserId == userId)
                anotherUserId = UserIds.Split('_')[1];
            chatting = true;
            StateHasChanged();
        }
    }

    Task NotifyUser(string name, string message, string receiver)
    {
        if (receiver == userId)
        {
            messages.Add(new Message(name, message, true));
            StateHasChanged();
        } else if (receiver == anotherUserId)
        {
            messages.Add(new Message(name, message, false));
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    async Task Send()
    {
        await connection.InvokeAsync("SendMessage", userName, newMessage, anotherUserId);
        newMessage = "";
    }

    public void Dispose()
    {
        if (connection != null)
        {            
            connection.StopAsync();
            connection.DisposeAsync();
        }
    }
}