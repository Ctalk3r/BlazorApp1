@page "/chats/{userIds}"
@page "/chats"
@implements IDisposable
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@inject NavigationManager  _navigationManager
@inject ApplicationDbContext  _applicationDbContext
@inject ChatService _chatService
@inject IJSRuntime JsRuntime


<AuthorizeView>
    <Authorized>
        <ChatComponent OnClick="NotifyUser"></ChatComponent>
        <div class="content px-4">

            @if (chatting)
            {
                <div class="chat_window">
                    <div class="top_menu">
                        <div class="buttons">
                            <div class="button close"></div>
                            <div class="button minimize"></div>
                            <div class="button maximize"></div>
                        </div>
                        <div class="title">Chat</div>
                    </div>
                    <ul class="messages" id="1">
                        @for (int i = 0; i < messages.Count; ++i)
                        {
                            <li class="message @(messages[messages.Count - i - 1].IsMine ? "right" : "left")">
                                <div class="avatar"></div>
                                <div class="text_wrapper">
                                    <div class="text">@messages[messages.Count - i - 1].Body</div>
                                </div>
                            </li>
                        }
                    </ul>
                    <div class="bottom_wrapper clearfix">
                        <div class="message_input_wrapper">
                            <input @bind-value="newMessage" class="message_input" placeholder="Type your message here..." />
                        </div>
                        <div class="send_message" @onclick=@Send>
                            <div class="icon"></div>
                            <div class="text">Send</div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <h1>Chat List</h1>
                @if (CurrentJobs != null)
                    foreach (var jobId in CurrentJobs)
                    {
                        var job = _applicationDbContext.Find<Job>(jobId);
                        <tr>
                            <td>
                                <NavLink class="nav-link" Match="NavLinkMatch.All" href=@($"/chats/{job.FreelancerId}_{job.ClientId}")>@job.Title</NavLink>
                            </td>
                            <td>
                                <MatIconButton Icon="settings" OnClick="@(() => OpenSettings(jobId))"></MatIconButton>
                            </td>
                        </tr>
                    }
                <MatDialog @bind-IsOpen="@dialogIsOpen">
                <MatDialogTitle>Set message self-destructive time</MatDialogTitle>
                <MatDialogContent>
                    <p>
                        <MatRadioGroup @bind-Value="@TimeValue">
                            <MatRadioButton Value="@("d")" Label="Days"></MatRadioButton>
                            <MatRadioButton Value="@("h")" Label="Hours"></MatRadioButton>
                            <MatRadioButton Value="@("m")" Label="Minutes"></MatRadioButton>
                            <MatRadioButton Value="@("s")" Label="Seconds"></MatRadioButton>
                        </MatRadioGroup>
                    </p>
                    <p>
                    <p>
                        <MatTextField  @bind-Value="@Duration" Label="Standard" Icon="timer" Outlined="true"></MatTextField>
                    </p>
                    </p>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(_ => { dialogIsOpen = false; })">Cancel</MatButton>
                    <MatButton OnClick="@OkClick">OK</MatButton>
                </MatDialogActions>
            </MatDialog>
            }
        </div>
    </Authorized>
</AuthorizeView>


@code {
    bool chatting = false;
    bool dialogIsOpen = false;
    string newMessage = null;
    string userName = null;

    List<Message> messages = new List<Message>();

    [Parameter]
    public string UserIds { get; set; }
    HubConnection connection;
    string userId = null;
    string anotherUserId = null;
    string[] CurrentJobs { get; set; }
    string[] MessagesForDeleting { get; set; }
    protected string TimeValue { get; set; } = "d";
    protected string Duration { get; set; } = "1";

    protected async override Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity.Name;
        userId = _userManager.GetUserId(user);
        CurrentJobs = (await _userManager.FindByIdAsync(userId)).CurrentJobs?.Split();
        if (UserIds != null && userId != UserIds.Split('_')[1] && userId != UserIds.Split('_')[1])
            _navigationManager.NavigateTo("/");
        //Initialize SignalR
        //    connection = new HubConnectionBuilder()
        //.WithUrl("https://localhost:44306/chathub")
        //.Build();
        //    connection.On<string, string, string>("NotifyUser", NotifyUser);
        //    await connection.StartAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (UserIds != null)
        {
            anotherUserId = UserIds.Split('_')[0];
            if (anotherUserId == userId)
                anotherUserId = UserIds.Split('_')[1];
            chatting = true;
            if (MessagesForDeleting != null)
            {
                try
                {
                    foreach(var id in MessagesForDeleting)
                    {
                        var res = _applicationDbContext.Find<Message>(id);
                        if (res != null)
                            _applicationDbContext.Remove(res);
                    }
                    _applicationDbContext.SaveChanges();
                }
                catch(Exception e)
                {

                }
                finally
                {
                    MessagesForDeleting = null;
                }

            }
            messages = _applicationDbContext.Messages
                .Where((user) => (user.FirstUserId == anotherUserId || user.FirstUserId == userId) &&
                                (user.SecondUserId == anotherUserId || user.SecondUserId == userId))
                .OrderBy(el => el.CreationTime)
                .Skip(Math.Max(0, _applicationDbContext.Messages.Count() - 50))
                .ToList();
            messages.ForEach((message) => message.IsMine = userId == message.FirstUserId);
            StateHasChanged();
        }
    }
    async Task NotifyUser(Tuple<string, string> response)
    {
        if (response == null)
        {
            return;
        }
        if (response.Item1 == null)
        {
            MessagesForDeleting = response.Item2.Split();
            return;
        }
        var username = response.Item1;
        var message = response.Item2;
        messages.Add(new Message(username, message, userName == username));
        // await JsRuntime.InvokeVoidAsync("scrollDown");
    }

    //Task NotifyUser(string name, string message, string receiver = null)
    //{
    //    if (receiver == userId)
    //    {
    //        messages.Add(new Message(name, message, true));
    //        StateHasChanged();
    //    } else if (receiver == anotherUserId)
    //    {
    //        messages.Add(new Message(name, message, false));
    //        StateHasChanged();
    //    }
    //    return Task.CompletedTask;
    //}

    async Task Send()
    {
        //await connection.InvokeAsync("SendMessage", userName, newMessage, anotherUserId);
        _chatService.NotifyUser(anotherUserId, newMessage, userName);
        _chatService.NotifyUser(userId, newMessage, userName);
        _applicationDbContext.Messages.Add(new Message(userName, newMessage, false)
        {
            IsSecret = true,
            FirstUserId = userId,
            SecondUserId = anotherUserId
        });

        try
        {
            _applicationDbContext.SaveChanges();
            newMessage = "";
        }
        catch (Exception e)
        {    
            messages.Add(new Message(userName, newMessage, false));
            newMessage = "";

            StateHasChanged();
        }
        

    }

    public void Dispose()
    {
        if (connection != null)
        {
            connection.StopAsync();
            connection.DisposeAsync();
        }
    }

    private string currentJob = null;
    public void OpenSettings(string jobId)
    {
        dialogIsOpen = true;
        currentJob = jobId;
    }

    void OkClick()
    {
        int duration;
        if (!Int32.TryParse(Duration, out duration) || duration < 1)
            return;
        var job = _applicationDbContext.Find<Job>(currentJob);
        string key = job.ClientId.GetHashCode() < job.FreelancerId.GetHashCode() ?
                                                job.ClientId + "_" + job.FreelancerId :
                                                job.FreelancerId + "_" + job.ClientId;
        switch(TimeValue)
        {
            case "s":
                _chatService.AddTimer(key, TimeSpan.FromSeconds(duration));
                break;
            case "m":
                _chatService.AddTimer(key, TimeSpan.FromMinutes(duration));
                break;
            case "h":
                _chatService.AddTimer(key, TimeSpan.FromHours(duration));
                break;
            case "d":
                _chatService.AddTimer(key, TimeSpan.FromDays(duration));
                break;
        }
        dialogIsOpen = false;

    }
}