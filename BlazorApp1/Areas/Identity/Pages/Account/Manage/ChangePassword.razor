@page "/Identity/Account/ChangePassword"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<User> _signInManager
@inject UserManager<User> _userManager
@inject NavigationManager  _navigationManager
@inject ApplicationDbContext _applicationDbContext
@inject IMatToaster Toaster
<h3>ChangePassword</h3>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="@changePasswordModel" OnValidSubmit="@OnChangePasswordAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (HasPassword)
            {
                <div class="form-group">
                    <label for="oldPassword">OldPassword</label>
                    <InputText type=password id="oldPassword" @bind-Value="changePasswordModel.OldPassword" class="form-control" />
                </div>
            }
            <div class="form-group">
                <label for="password">NewPassword</label>
                <InputText type=password id="password" @bind-Value="changePasswordModel.NewPassword" class="form-control" />
            </div>
            <div class="form-group">
                <label for="confirmPassword">ConfirmPassword</label>
                <InputText type=password id="confirmPassword" @bind-Value="changePasswordModel.ConfirmPassword" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();
    User user = null;
    bool HasPassword { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var myProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        var authState = await myProvider.GetAuthenticationStateAsync();
        user = await _userManager.FindByEmailAsync(authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value);

        HasPassword = await _userManager?.HasPasswordAsync(user);
        if (!HasPassword)
            changePasswordModel.OldPassword = "Empty_password";
    }

    protected async Task OnChangePasswordAsync()
    {

        var myProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        var authState = await myProvider.GetAuthenticationStateAsync();
        if (HasPassword && !await myProvider?.CanSignIn(user?.Email, changePasswordModel?.OldPassword, _userManager))
        {
            Toaster.Add($"Wrong password", MatToastType.Danger, "Failure", "code");
        }
        else
        {
            string newHashPassword = _userManager.PasswordHasher.HashPassword(user, changePasswordModel.NewPassword);
            user.PasswordHash = newHashPassword;
            await _applicationDbContext.SaveChangesAsync();
            Toaster.Add($"Your password has been changed", MatToastType.Success, "Success", "code");
        }
    }
}
